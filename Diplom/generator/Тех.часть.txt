
- разработка ПО бортовой ЭВМ робота;
- разработка системы управления движением со стабилизацией по курсу, траектории, скорости;
- разработка системы управления «жестикуляцией» робота.

как собрано с фото
и все программы в том-же порядке, как в к-й части с теми же описаниями

==Технологическая часть==

===Изготовление и сборка схемотехнических решений===

Исходя из предложенного в разделе //структурная схема робота// деления блоков по выполняемым действиям и выдвинутых в разделе //Требования// требований была разработана принципиальная электрическая схема андроидного робота. Она показана на рисунке //рисунок//.

[[Принципиальная_схема_робота.png]]

Для удобства дальнейшего описания разберём отдельные подсистемы робота. 
В их число входят:

а) подсистема управления движением рук;
б) подсистема управления движением ног;
в) подсистема управления движением головы;
г) подсистема управления движением захватов кистей;
д) подсистема сбора информации с датчиков растояния;
е) подсистема управления курсом с помощью гироскопа;
ж) подсистема управления питанием бортовой ЭВМ;
з) подсистема управления устройствами ЧМИ.

[[Устройства_ЧМВ_(схема_принципиальная).png]]

Для разработки аппаратной части использовались плата arduino с микроконтроллером Atmega 2560, гироскоп, акселерометр, плата драйверов двигателя, блок реле, ультразвуковые датчики измерители расстояния, преобразователь интерфейсов USART → rs485 → USB, серво-моторы, электродвигатели постоянного тока и другие компоненты. Также в системе присутствует бортовая ЭВМ для выполнения части (какой?) функций робота.
Для разработки программной системы использовался язык программирования C и библиотеки Arduino.

====Схемотехника управления двигателями====

В качестве приводов рук и ног используются электродвигатели постоянного тока от сткелоподъемников ВАЗ 2110. Эти двигатели (см рис //двигатели//) обладают большим крутящим моментом, достаточным для поворота рук и перемещения робота. Скорость вращения двигателей может изменяться под действием ШИМ-сигнала. Направление вращения задается полярностью подключения. Таким образом, для управления этим двигателем идеально подходит плата VNH5019A. Это сдвоенный мостовой драйвер, предназначенный для управления электродвигателями постоянного тока. ИМС имеет возможность управления выходными цепями с помощью ШИМ-сигнала. Схема включения – типовая, взята из официальной документации.
Одна микросхема VNH5019A предоставляет два независимых «мостовых» выхода или четыре обычных силовых выхода нагрузочной способностью до 30 ампер при напряжении до 50 вольт. Это больше, чем требуется, и опыту практического применения этой микросхемы сказать, что она выдерживает токи до 30 ампер на канал без каких-либо последствий при наличии качественного охлаждения. В схеме блока применены две такие микросхемы; таким образом, число силовых выходов может варьироваться от четырех до восьми.
Каждый из мостовых выходов VNH5019A имеет возможность измерения величины проходящего через него постоянного тока за счет наличия вывода ― Current sensing A/B‖. Технически это общая точка драйверов обоих полумостов канала, которая должна подключаться к общему проводу силового питания через токовый шунт или напрямую, если измерение тока не требуется.
Для защиты силовых выходов от всплесков ЭДС самоиндукции при коммутации индуктивной нагрузки каждый из восьми выходов подключен к средней точке пары диодов, включенных последовательно между цепями силового питания ИМС; таким образом, выброс напряжения любой полярности извне блока будет выровнен по величине с соответствующим уровнем питающих цепей и не будет представлять угрозы для ИМС.
К каждому из восьми управляющих входов ИМС подключен индикаторный светодиод для отображения текущего состояния выхода.

[[Внешний_вид_VNH5019A.jpg]]

[[Двигатели_установленные_в_робота.png]]

===Разработка ПО микроконтроллера===

Плата arduino с микроконтроллером Atmega 2560.
В качестве управляющего микроконтроллера был использован МК Atmega2560 (рисунок //arduino//). Это высокопроизводительный (до 16 MIPS) малопотребляющий микроконтроллер с разрядностью 8 бит и RISC - архитектурой. Он имеет два 8-битных и четыре 16-битных таймера-счетчика, которые могут генерировать ШИМ-сигнал на соответствующих выводах микроконтроллера. Tакже имеются 16 каналов АЦП разрядностью 10 бит, модули TWI и UART, 16 входов внешних прерываний. Выбор именно Atmega2560 обусловлен тем, что для работы всех устройств необходимо большое количество входов и выходов, что как раз и отличает этот контроллер от, например, Atmega328 и др. подобных. Общее количество GPIO-выводов МК равняется 64, что за вычетом выводов, занятых различными интерфейсами, вполне достаточно для обеспечения управляющими сигналами внешних устройств.

[[Внешний_вид_МК_Atmega2560.jpg]]

Гироскоп

[[Внешний_вид_гироскоп.jpg]]

Плата гироскопа с микросхемой MPU5060 удовлетворяет требованиям, предъявляемым к модулю, а именно наличие гироскопа, акселерометра и магнитного компаса в составе единого устройства с интерфейсом I2C.

Блок реле
Блок реле присутствует и представляет из себя плату, на которой размещены 4 реле марки Китай, 4 блока оптической развязки (гальванической), управляющие входы, управляющиеся инверсным сигналом и индикаторные светодиоды, которые показывают состояние реле.

Ультразвуковые датчики измерители расстояния
В системе используются ультразвуковые измерители расстояния HC-SR04. Их выбор обусловлен простотой работы с протоколом, который они используют.

Преобразователь интерфейсов USART → rs485 → USB
Для обеспечения связи между бортовой ЭВМ и контроллером используется шина rs485, и, соответственно, преобразователь интерфейсов. Он содержит в себе контроллер USB, микросхему MAX485, и микросхему для работы с USART. Его применение обусловлено необходимостью создания единой ЛВС робота, в которую входят все бортовые устройства.

===Разработка ПО бортовой ЭВМ робота===

// Генератор бреда из отчета по Кузнецову !!

===Разработка системы управления движением===

====Стабилизация курса, траектории и скорости====

Для получения более точных данных о параметрах движения, при включении робота выполняется калибровка гироскопа.

[[Калибровка_гироскопа.png]]

[[Код_калибровки_гироскопа.png]]
Пример кода калибровки представлен ниже:
begin;

S = 0;
old_z = гироскоп(z);
for (i=0; i < 10; i++)
{
  задержка 0.3 сек;
  new_z = гироскоп(z);
  S = S + (new_z - old_z);
}
дрейф = S / 10;

end;

Согласно описанному в конструкторской части ПИД регулятору, был написан код регулирования курса, траектории и скорости.
Код ПИД-регулятора обеспечения режима движения робота с заданной скоростью:

[[Код_ПИД-регулятора.png]]

begin;

gz += (гироскоп(z) - дрейф) * dt;
z = команда(курс);
левый(Sц + Kp * atan(z - gz));
правый(Sц - Kp * atan(z - gz));

delay(dt * 1000)

end;

===Разработка системы управления «жестикуляцией» робота===

Код автомата рук и сервоприводов.

Согласно приведенному в конструкторской части автомату, был реализован конечный автомат рук, для управления руками.

[[Код_автомата_управления_руками.png]]
