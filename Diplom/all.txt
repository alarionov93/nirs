Разработка аппаратного и программного обеспечения системы управления исполнительными механизмами андроидного робота

Предполагается:

а) разработка схемотехнических решений

б) разработка ПО микроконтроллера

в) разработка ПО бортовой ЭВМ робота.

Функции:

а) управление движением со стабилизацией по курсу, траектории, скорости.

б) управление питанием бортового оборудования с контролем целостности цепей питания и управления

в) управление «жестикуляцией» робота.

Собранное шасси «робота-референта» (на базе Промобота). Возможность управления им с ПК, пульта.

==Определения и сокращения==
ИМ - исполнительные механизмы
БИНС - бесплатформенная инерциальная навигационная система

==Введение==

В наши дни тема взаимодействия робота и человека становится все более актуальной. Многие предприятия и заводы едва ли можно представить без использования робототехники. В настоящее время робототехника завоевывает все большие отрасли промышленности и все плотнее внедряется в различные сферы человеческой жизни. И если раньше роботы могли исполнять некоторые функции человека, заменяя его на заводах, где часто требуются однообразные действия при конвейерном производстве, при производстве разнообразных механизмов, то теперь наступили времена, когда роботы способны выполнять всё более сложные задачи. Развивается наука, развивается и техника, следуя за прогрессом.

Также в настоящее время роботы активно внедряются в образовательную и выставочную деятельность. Особое внимание привлекают роботы андроидного типа или антропоморфные роботы, имитирующие поведение человека. В связи с этим ставится вопрос об использовании роботов этого типа для привлечения внимания и выполнения задач их прямого назначения. Данное исследование посвящено разработке робота андроидного типа.

Важной частью современного робота становится его мобильность – способность к перемещению для выполнения необходимых манипуляций. Самые распространённые варианты шасси для наземных роботов – колесные, гусеничные и шагающие. Колесные шасси проще остальных по конструкции, но предназначены в основном для ровной поверхности, гусеничные сложнее в производстве, но имеют большее сцепление и легче проходят на пересеченной местности.

...
Подвижный робот имеет в своем составе две видеокамеры. С помощью сети Wi-Fi робот может взаимодействовать с другими устройствами и роботами. Взаимодействие робота с компьютером оператора предоставляет ему дополнительные вычислительные ресурсы, базы данных и соединение с Интернетом.

...
Разработка новых интеллектуальных систем управления робототехническими системами является сегодня актуальной задачей. Одним из основных вопросов, возникающих при ее решении, является умение сочетать концепции, плодотворность которых прошла проверку временем, с новейшими методами программной и аппаратной реализации математических моделей.
В статье предлагается описание проекта по созданию интеллектуальной системы управления роботизированным объектом (робот-промоутер), которая обладает рядом преимуществ, при этом не имеет существенных ограничений по области применения.

...


Актуальность

Научная новизна

Практическая значимость

Цель
Разработка аппаратного и программного обеспечения системы управления исполнительными механизмами андроидного робота

Задачи
- исследование предметной области;
- разработка схемотехнических решений;
- разработка ПО микроконтроллера;
- разработка ПО бортовой ЭВМ робота;
- разработка системы управления движением со стабилизацией по курсу, траектории, скорости;
- разработка системы управления «жестикуляцией» робота.

[[00_Main.png]]
[[01_Init.png]]
[[02_gyro_init.png]]
[[03_Main_loop.png]]
[[031_Distance_sensors.png]]



=Исследовательская часть=

// тут НИР

==Исследование существующих подходов к управлению ИМ робота==

Проектирование и разработка андроидных роботов широко практикуется в настоящее время. Обратимся к литературе на данную тематику.
В статье /КХ/ представлена разработка аппаратно-программного комплекса для управления робототехнической платформой и программно- алгоритмического обеспечения для автономного движения и бесконтактного управления робототехнической платформой.
В ходе тестирования представленной в этой статье платформы была решена задача обработки данных с камеры Kinect и распознавания жестов оператора, отлажена передача данных на микроконтроллер Arduino Mega2560, разработана программа управления по передвижению робототехнической платформы в необходимых направлениях, апробированы модули ввода данных с датчиков.
Экспериментально подтверждено, что робототехническая платформа выполняет движения в необходимых направлениях с учетом локальных препятствий в режиме реального времени, на основе данных, получаемых с датчиков.
В статье /МСЛ/ описано создание кисти-манипулятора для андроидного робота. В робототехнике широкое распространение получили клешни для захвата различных предметов. Клешня состоит из двух направляющих, при сближении которых и происходит удержание предмета. Движения направляющих происходит с помощью сервоприводов.
На сегодняшний день большое распространение получили роботы-андроиды. Но практическое применение может иметь и рука (кисть руки) робота отдельно - в качестве протеза для инвалидов. Кисть используют в медицинской технике, в частности области медицинских средств реабилитации двигательного аппарата человека. Цель - повышение степени приспосабливания при захвате предметов. Пальца кисти андроида могут быть использованы для жестикуляции в развлекательных целях и для рекламы.
В статье /ККЮ/ рассмотрены перспективы развития мобильных робототехнических комплексов. Автор описывает что в настоящее время в мире наблюдается широкое распространение роботизированных систем и робототехники в целом. Во многих странах, в том числе и в Казахстане, робототехника является уже отдельной дисциплиной изучаемой в учебных заведениях, и не только в профильных вузах, но и в школах, и, соот- ветственно, в педагогических вузах.
Востребованность специалистов, обладающих знаниями в этой области,ежегодно растет. Это обусловлено многими объективными факторами, решающим из которых, конечно же, является бурное развитие робототехники.
Сферы применения роботов и робототехники различны: образование, ме- дицина, строительство, геодезия, метеорология и т.д.
Особое значение, так же занимает развитие так называемой, автономной и мобильной робототехники. В силу того, что робототехника зачастую применяется для выполнения работ в недоступных человеку местах, то именно мобильная робототехника часто является приоритетом. Однако, не только в перечисленных выше случаях требуется мобильная робототехника, определенной ветвью ее развития является автономная робототехника, подразумевающая практически полное исключение вмешательства человеческой деятельности для выполнения каких-либо задач. Иными словами, такая робототехника является наиболее перспективной и интересной в плане разработки. Для осуществления автономности, в мобильной робототехнике, все чаще применяется искусственный интеллект, а точнее его элементы. С развитием облачных технологий, стоит обратить внимание, на интеграцию и объединение различных по мощности вычислительных мощностей и сервисов искусственного интеллекта, для полномасштабной реализации полной мобилизации и автономности робототехники.
В статье /ШВК/ рассмотрена еще одна интересующая нас в рамках НИР область - системы технического зрения. Применение систем технического зрения (СТЗ) позволяет выполнять обнаружение и распознавание объектов окружающей среды, производить анализ ряда их характеристик. Поэтому включение СТЗ в состав робототехнических систем стало признанной тенденцией их развития.
СТЗ в составе робототехнической системы могут быть использованы для решения следую- щих задач:
обнаружение объектов;
определение формы объектов;
распознавание и классификация объектов; выделение изображений;
распознавание и классификация изображений. Указанные задачи в той или иной степени
могут быть решены с использованием одной СТЗ или совокупности СТЗ, в т. ч., основанных на различных физических принципах. Для решения задачи планирования траектории движения наи- более часто применяются СТЗ, построенные по принципу восприятия отражённого от объектов сигнала (инфракрасного или ультразвукового спектра), т. е., СТЗ радарного типа, сканирующие окружающее пространство. Для распознавания изображений необходимы СТЗ, позволяющие получить растровое представление сцены.
Применение таких СТЗ как видеокамеры, при соответствующей обработке данных позволяет решить как задачу планирования траектории, так и задачу распознавания, однако обработка растровых изображений требует больших вычислительных ресурсов и применения мощных вычис- лителей или специализированных сигнальных процессоров. Одной из основных проблем обработки и анализа изображений является неопределённость и неоднозначность их характеристик в связи с непостоянством освещённости, изменением цветовых характеристик и расположения объектов на фоне; кроме того, в ряде случаев применение аналитических методов обработки изображений во встраиваемых системах затруд- нено или невозможно по причине сложности используемого математического аппарата и, следовательно, ресурсоёмкости этих методов, из-за чего представляет интерес применение в таких задачах методов и средств интеллектуальной обработки данных (в частности, аппарата нечётких вычислений), эффективно решающих эти задачи при существенных ограничениях на вычислительные ресурсы. Отметим, что методы нечёткой обработки позволяют оперировать такими есте- ственными параметрами описания изображений, как яркость, однородность, близость участков и др., а также обладают простотой модификации, предсказуемостью и объяснимостью поведения.
Обобщенная структура использования средств нечётких вычислений в задачах обработки изо- бражения показана на рис. 1.
Существующие СТЗ коммерческого назначения и средства их разработки являются закрытыми и непригодными для исследований принципов построения СТЗ, создания новых методов и ал- горитмов их функционирования. Таким образом, актуальна задача разработки открытых средств проектирования встраиваемых СТЗ, позволяю- щих выполнять научные исследования и проводить подготовку специалистов в области автоматики и вычислительной техники.
В свою очередь, в статье /СЗ/ рассмотрена система управления движением автономной колесной платформы. В статье описан состав аппаратной и программной частей платформы и даны основные принципы проектирования таких устройств. Рассмотрим состав системы управления движением платформы подробнее: выбор направления движения аппарата осуществляет связка из нейронной сети (определяющей, в каком направлении находится маркер, обозначающий конечную точку маршрута) и системы нечеткой логики, выбирающей направление движения аппарата на основе данных нейронной сети и датчиков расстояния до препятствий. Выбранное направление движения преобразуется в команды и передается в систему управления движением. Система включает в себя микроконтроллер ArduinoDuemilanove на основе ATMega 328. Для управления работой двигателей предназначен силовой модуль расширения Ardumoto L298P MotorDriverShield. На модуле расширения для дополнительного прототипирования установлен модуль датчиков, оборудованный магнетометром и акселерометром. Кроме того, именно к этому модулю подключены ультразвуковые датчики расстояния, оценивающие расстояние до препятствий перед платформой слева и справа по направлению движения. По центру платформы в передней части расположен инфракрасный датчик препятствий, выдающий сигнал в случае, если препятствие находится прямо перед платформой на расстоянии 800 мм и менее.
Программное обеспечение микроконтроллера.
Движением аппарата управляет микроконтроллер, микропрограмма которого включает в себя блок инициализации, в котором производится настройка датчиков, а также основной цикл, в котором последовательно производится опрос датчиков аппарата, определение возможности движения в данный момент, остановка движения в случае наличия препятствия в непосредственной близости, передача телеметрической информации в бортовой компьютер, а также
прием и анализ команд, поступивших от бортового компьютера.
Одним из важнейших требований к программному обеспечению микроконтроллера являлась высокая надежность работы и устойчивость к возникновению прерываний и сбоев в канале передаче данных между бортовым компьютером и микроконтроллером. Исходя из этих требований, для реализации программного обеспечения микроконтроллера была выбрана концепция автоматного программирования. Часть программного кода, ответственная за командноинформационный обмен с бортовым компьютером, представляет собой конечный частично определенный детерминированный автомат-распознаватель. Автомат содержит 13 состояний и 26 переходов между ними. Прием числовых данных реализован отдельной процедурой, причем возникновение ошибки в ходе приема информации немедленно переводит автомат в исходное состояние, что обеспечивает высокую устойчивость системы к ошибкам и сбоям. Программное обеспечение на стороне бортового компьютера, принимающее телеметрические данные от микроконтроллера, реализовано по такому же принципу. Таким образом, сбой работы микроконтроллера так же не приводит к прекращению обменом информацией между бортовым компьютером и управляющим микроконтроллером или зависанию программы. Для возобновления нормального функционирования системы достаточно перезагрузить микроконтроллер либо бортовой компьютер, других специальных шагов предпринимать не требуется.
Выводы. Описанная выше система является частью мобильной платформы и была использована для обучения студентов по дисциплинам «Основы обработки изображений», «Нейронные сети» и «Нечеткая логика». Использование показало высокую эффективность предложенной системы, отсутствие сбоев во время работы и заинтересованность студентов в процессе обучения. В дальнейшем предполагается участие студентов в разработке программного обеспечения микроконтроллера, также возможна интеграция в состав системы управления, основанной на ROS (RoboticOperatingSystem).
Данная система может быть использована для проведения исследований и опытно-конструкторских работ в области робототехники, разработки автономных исследовательских систем и систем автоматического управления, а также для проведения практических занятий со студентами, бакалаврами и магистрантами соответствующих направлений.

...
Конечный автомат. Несмотря на стремительное развитие информационных технологий, надежные традиционные методы и инструменты прикладного программирования не теряют свою актуальность.
Одним из таких инструментов является основной программный компонент системы, разработанной в рамках данного проекта – конечный автомат (КА). Область применения КА включает в себя все сферы информационного пространства – от систем синтаксического анализа до больших интеллектуальных систем управления промышленным оборудованием и роботизированными объектами.
В данном проекте КА представляет собой поведение объекта в зависимости от той или иной ситуации (состояния).
Схема конечного автомата (рис. 2) представляет собой совокупность возможных действий робота с описанием того или иного состояния.

// вставить рисунок
Рисунок 2


==Исследование шасси "Промобота"==
В основе робота было использовано уже имеющееся шасси, представляющее из себя набор исполнительных механизмов и датчиков перечень которых приведен в таблице /таблица промобот/

/таблица промобот/

№ п/п ; Наименование прибора 		; Назначение прибора ; Характеристики ;
1	  ; Привод правого колеса 		; Перемещение робота ; 12V 10A	DC 1шт.;
2	  ; Привод левого колеса 		; Перемещение робота ; 12V 10A	DC 1шт.;
3	  ; Привод правой руки	 		; "Жестикуляция" робота ; 12V 10A	DC 1шт.;
4	  ; Привод левой руки	 		; "Жестикуляция" робота ; 12V 10A	DC 1шт.;
5	  ; Привод поворота головы 		; "Жестикуляция" робота ; Серво 5V 2А PWM 1шт.;
6 	  ; Ультразвуковые датчики расстояния ; Обнаружение препятствий ; 10 - 200см 8шт.;
7 	  ; Инфракрасные датчики расстояния ; Обнаружение препятствий ; неисправны 6шт.;
8 	  ; Модуль датчика напряжения питания ; Контроль напряжения бортовой сети ; Аналоговый;
9 	  ; Аккустический усилитель ; Усиление аудио частот ; Аналоговый;
10 	  ; Динамики ; Воспроизведение звука ; 4 Ом;
11 	  ; WiFi-адаптер ; Связь с интернетом ; 2.4Ггц;
12 	  ; Arduino Uno R3 ; Управление ИМ ; Atmega 328 P;
13 	  ; Драйверы управления двигателями постоянного тока; Управление двигателями ; 12V, 20А, 2-канальный, цифровое управление, 2шт.;
14 	  ; Материнская плата ; Организация вычислительного процесса ; Core i7, SSD;
15 	  ; LED-матрица ; "глаза" робота ; RGB, 5V, цифровое управление;
16 	  ; Блок питания ; Питание ; 12V 20А;
17 	  ; Камера ; Обнаружение человека ; Веб, 640x480;
18	  ; Концевые выключатели рук ; Определение границ перемещения рук ; 2 контакта;

Рассмотрим подробнее вышеприведенную таблицу. Все устройства работают под управлением бортовой ЭВМ (строки 14, 16). Взаимодействие компьютера и ИМ осуществляется посредством микроконтроллера Arduino (строка 12). Управление двигателями (строки 1-4) происходит посредством драйверов управления двигателями (строка 13), и инерфейсов связи между ними. Для связи с сетью используется WiFi адаптер(строка 11). Звуки воспроизводятся по команде с ЭВМ с помощью динамиков и усилителя (строки 9, 10). Для ориентации в пространстве используются датчики расстояния (строки 6, 7). Для контроля напряжения бортовой сети используется вольтметр (строка 8). Для имитирования эмоций используются LED-матрицы (строка 15). Для определения границ перемещения рук используются концевые выключатели (строка 18). Для обнаружения людей используется веб-камера (строка 17). И наконец, для поворота головы используется серво-мотор (строка 5).

Требования к шасси робота сформулированы в таблице /таблица требования/.

Для удовлетворения требований, предъявляемых к роботу, в конструкции отсутствуют следующие элементы:
1. БИНС. Необходима для стабилизации курса робота.
2. Серво-привод наклона головы. Нужен для расширения возможностей эмоционального взаимодействия с человеком.
3. Серво-приводы кистей рук. Также необходимы для расширения возможностей эмоционального взаимодействия с человеком.
4. Дисплей. Служит также для расширения возможностей эмоционального взаимодействия с человеком.
5. Датчики расстояния. Должны быть заменены для соответствия заявленным требованиям по ориентированию робота.
6. Реле. Должны быть использованы для корректного управления цепями нагрузки.

Анализ требований показывает, что имеющиееся аппаратное обеспечение нуждается в доработке. Для выполнения реинжинирига робота необходимо произвести анализ доступных на рынке модулей и компонентов, которые могут быть использованы для сборки робота.

/таблица требования/ 

==Исследование существующего аппаратного обеспечения==

==Обзор достоинств и недостатков существующих решений==
==Конструкторская часть==

===Проектирование схемотехнических решений===
//TODO: стырить у Оли!
[[Структурная_схема_робота.png]]

===Проектирование ПО микроконтроллера===
//TODO: стырить Оле у меня!

Алгоритмы работы.
// TODO: вставить алгоритмы

== Автомат рук ==

[[Автомат_рук.png]]

Если автомат в момент 0 находится в состоянии "инициализация", а входное воздействие равно "0", то следующее состояние будет равно "инициально опустить руки".При пребывании автомата в состоянии "инициально опустить руки" в момент времени 1 имея на входе воздействие "нажат к.в.", автомат сменит состояние на "остановка".При пребывании автомата в состоянии "начать движ. вниз" в момент времени 2 имея на входе воздействие "время > 10 сек", автомат сменит состояние на "ошибка".При пребывании автомата в состоянии "начать движ. вниз" в момент времени 3 имея на входе воздействие "к.в. отпущен", автомат сменит состояние на "продолжить опускать руки".В момент времени 4 автомат перешел в состояние "продолжить опускать руки", и входное воздействие равно "время > 10 сек", то он перейдет в состояние "ошибка".
Если в момент времени 5 автомат находится в состоянии "продолжить опускать руки" при входном воздействии "к.в. нажат", то он перейдёт в состояние "остановка".В момент времени 6 робот находится в состоянии "начать движ. вверх", и при входном воздействии "время > 10 сек", он переходит в состояние "ошибка".В момент времени 7 робот находится в состоянии "начать движ. вверх", и при входном воздействии "к.в. отпущен", он переходит в состояние "продолжить поднимать руки".Если в момент времени 8 автомат находится в состоянии "продолжить поднимать руки" при входном воздействии "время > 10 сек", то он перейдёт в состояние "ошибка".В момент времени 9 автомат перешел в состояние "продолжить поднимать руки", и входное воздействие равно "к.в. нажат", то он перейдет в состояние "остановка".
В момент 10 автомат пребывает в состоянии "остановка", и, получив воздействие "0", он перейдет в состояние "ожидание".При пребывании автомата в состоянии "ожидание" в момент времени 11 имея на входе воздействие "принята команда вниз", автомат сменит состояние на "начать движ. вниз".Если автомат в момент 12 находится в состоянии "ожидание", а входное воздействие равно "принята команда вверх", то следующее состояние будет равно "начать движ. вверх".

== Автомат_Голова ==

[[Автомат_Голова.png]]

Если автомат в момент 0 находится в состоянии "инициализация", а входное воздействие равно "0", то следующее состояние будет равно "установка в начальное положение".Если в момент времени 1 автомат находится в состоянии "установка в начальное положение" при входном воздействии "требуемый угол достигнут", то он перейдёт в состояние "начальное положение установлено".При пребывании автомата в состоянии "начальное положение установлено" в момент времени 2 имея на входе воздействие "угол < требуемый", автомат сменит состояние на "поворот на Х градусов в горизонтальной плоскости".Если в момент времени 3 автомат находится в состоянии "начальное положение установлено" при входном воздействии "угол < требуемый", то он перейдёт в состояние "поворот на Х градусов в вертикальной плоскости".
В момент времени 4 робот находится в состоянии "поворот на Х градусов в горизонтальной плоскости", и при входном воздействии "требуемый угол достигнут", он переходит в состояние "поворот завершен".Если в момент времени 5 автомат находится в состоянии "поворот на Х градусов в вертикальной плоскости" при входном воздействии "требуемый угол достигнут", то он перейдёт в состояние "поворот завершен".При пребывании автомата в состоянии "поворот на Х градусов в вертикальной плоскости" в момент времени 6 имея на входе воздействие "требуемый угол достигнут", автомат сменит состояние на "поворот завершен".Если в момент времени 7 автомат находится в состоянии "поворот на Х градусов в вертикальной плоскости" при входном воздействии "требуемый угол достигнут", то он перейдёт в состояние "поворот завершен".
== Автомат_Комп ==
[[ Автомат_Комп.png ]]
Если автомат в момент 0 находится в состоянии "инициализация", а входное воздействие равно "0", то следующее состояние будет равно "компьютер выключен".В момент времени 1 автомат перешел в состояние "компьютер выключен", и входное воздействие равно "0", то он перейдет в состояние "компьютер включается".В момент 2 автомат пребывает в состоянии "компьютер включается", и, получив воздействие "0", он перейдет в состояние "компьютер загружается".В момент времени 3 робот находится в состоянии "компьютер загружается", и при входном воздействии "получено подтверждающая последовательность", он переходит в состояние "компьютер загрузился".Если автомат в момент 4 находится в состоянии "компьютер загружается", а входное воздействие равно "превышено время ожидания", то следующее состояние будет равно "компьютер не загрузился".

== Автомат_Лампы ==
[[ Автомат_Лампы.png ]]
Если автомат в момент 0 находится в состоянии "инициализация", а входное воздействие равно "0", то следующее состояние будет равно "выключить все лампы".В момент 1 автомат пребывает в состоянии "выключить все лампы", и, получив воздействие "получено подтверждение включения компьютера", он перейдет в состояние "включить белые лампы".В момент времени 2 робот находится в состоянии "выключить все лампы в качестве сигнала об ошибке", и при входном воздействии "не получено подтверждение включения компьютера за 10 сек.|счетчик включений < 5|счетчик времени включенных ламп < Х", он переходит в состояние "включить все лампы".В момент времени 3 автомат перешел в состояние "включить все лампы", и входное воздействие равно "счетчик времени выключенных ламп < Х", то он перейдет в состояние "выключить все лампы в качестве сигнала об ошибке".
При пребывании автомата в состоянии "включить все лампы" в момент времени 4 имея на входе воздействие "счетчик включений > 5", автомат сменит состояние на "выключить все лампы".При пребывании автомата в состоянии "выключить все лампы" в момент времени 5 имея на входе воздействие "поехали вперед", автомат сменит состояние на "включить белые лампы".Если автомат в момент 6 находится в состоянии "выключить все лампы", а входное воздействие равно "поехали назад", то следующее состояние будет равно "включить красные лампы".При пребывании автомата в состоянии "включить белые лампы" в момент времени 7 имея на входе воздействие "остановились", автомат сменит состояние на "выключить все лампы".
При пребывании автомата в состоянии "включить красные лампы" в момент времени 8 имея на входе воздействие "остановились", автомат сменит состояние на "выключить все лампы".При пребывании автомата в состоянии "выключить все лампы" в момент времени 9 имея на входе воздействие "поехали вперед направо", автомат сменит состояние на "включить белую лампу справа".При пребывании автомата в состоянии "выключить все лампы" в момент времени 10 имея на входе воздействие "поехали назад направо", автомат сменит состояние на "включить красную лампу справа".В момент 11 автомат пребывает в состоянии "выключить все лампы", и, получив воздействие "поехали вперед налево", он перейдет в состояние "включить белую лампу слева".
Если автомат в момент 12 находится в состоянии "выключить все лампы", а входное воздействие равно "поехали назад налево", то следующее состояние будет равно "включить красную лампу слева".При пребывании автомата в состоянии "включить белую лампу справа" в момент времени 13 имея на входе воздействие "остановились", автомат сменит состояние на "выключить все лампы".В момент 14 автомат пребывает в состоянии "включить красную лампу справа", и, получив воздействие "остановились", он перейдет в состояние "выключить все лампы".

== Автомат_Обход препятствий ==

[[Автомат_Обход_препятствий.png]]

Если автомат в момент 0 находится в состоянии "стоим", а входное воздействие равно "потребность", то следующее состояние будет равно "захотели ехать".Если автомат в момент 1 находится в состоянии "захотели ехать", а входное воздействие равно "нет_препятствий(прямо)", то следующее состояние будет равно "ехать прямо".В момент времени 2 робот находится в состоянии "захотели ехать", и при входном воздействии "нет препятствий справа", он переходит в состояние "ехать направо".Если автомат в момент 3 находится в состоянии "захотели ехать", а входное воздействие равно "нет препятствий слева", то следующее состояние будет равно "ехать налево".В момент 4 автомат пребывает в состоянии "ехать прямо", и, получив воздействие "нет препятствий справа", он перейдет в состояние "ехать направо".В момент 5 автомат пребывает в состоянии "ехать прямо", и, получив воздействие "нет препятствий слева", он перейдет в состояние "ехать налево".При пребывании автомата в состоянии "ехать направо" в момент времени 6 имея на входе воздействие "нет препятствий прямо", автомат сменит состояние на "ехать прямо".
Если в момент времени 7 автомат находится в состоянии "ехать налево" при входном воздействии "нет препятствий прямо", то он перейдёт в состояние "ехать прямо".

====Обработка датчиков расстояния====
[[Датчики.png]]

[[Обработка_датчиков_расстояния.png]]

Ветка ожидание:
Блок 1: проверка состояния датчика расстояния.
Входы: состояние датчика
Выходы: направление дальнейшей работы (ожидание, триггер, эхо).

Блок 2: проверка времени ожидания.
Входы: время ожидания t (mс).
Выходы: если t > 1000mc, то истина, иначе ложь

Блок 3: состояние датчика := триггер
Входы: переменная состояния
Выходы: состояние датчика

Ветка триггер:
Блок 4: проверка состояния триггера
Входы: состояние датчика
Выходы: фронт вниз; фронт вверх; ожидание;

Блок 5: проверка времени импульса
Входы: фронт вниз
Выходы: если время импульса больше 10 мс, то истина, иначе - ложь

Блок 6: выставить низкий уровень на выходе триггера
Входы: -
Выходы: состояние выхода триггера

Блок 7: состояние триггера := ожидание
Входы: -
Выходы: состояние триггера

Блок 8: состояние := эхо
Входы: -
Выходы: состояние датчика

Блок 9: выставить высокий уровень на выходе триггера
Входы: фронт вверх
Выходы: состояние выхода триггера

Блок 10: состояние триггера := фронт вниз
Входы: -
Выходы: состояние триггера

Блок 11: состояние триггера := фронт вверх
Входы: -
Выходы: состояние триггера

Ветка 3:
Блок 12: проверка состояния эхо
Входы: состояние датчика
Выходы: фронт вверх; фронт вниз; ожидание;

Блок 13: проверить уровень на входе эхо по фронту вверх
Входы: уровень
Выходы: если низкий, то истина, иначе - ложь

Блок 14: проверить уровень на входе эхо по фронту вниз
Входы: уровень
Выходы: если низкий, то истина, иначе - ложь

Блок 15: вычислить расстояние
Входы: длительность импульса
Выходы: расстояние

Блок 16: состояние эхо := фронт вниз
Входы: состояние эхо
Выходы: состояние эхо

Блок 17: запомнить момент прихода импульса
Входы: импульс
Выходы: время прихода импульса

Блок 18: состояние эхо := фронт вверх
Входы: состояние эхо
Выходы: состояние эхо

====Основной алгоритм программы микроконтроллера====

Блок 1: инициализация устройств и подсистем
Входы: -
Выходы: состояние портов ввода/вывода, вектора прерываний

Блок 2: основной управляющий алгоритм
Входы: состояние датчиков, команды о бортовой эвм
Выходы: управляющее воздействие, ответы о выполнении команд

==== Инициализция устройств ====

Блок 1:Инициализация последовательного порта
Входы: - 
Выходы: состояние последовательного порта (RX/TX), прерывания

Блок 2: Инициализация реле компьютера
Входы: -
Выходы: состояния пинов реле

Блок 3: Инициализация светотехники
Входы: -
Выходы: состояние пинов реле светотехники

Блок 4: Инициализация шины I2C 
Входы: -
Выходы: состояние шины I2C

Блок 5: Инициализация сети 5V
Входы:
Выходы: состояние пинов реле цепи 5V

Блок 6: Инициализация реле моторов и их включение
Входы:
Выходы: состояние пинов драйверов моторов

Блок 7: Инициализация таймеров
Входы:
Выходы: состояние регистров таймеров

Блок 8: Инициализация портов
Входы:
Выходы: состояние портов

Блок 9: Инициализация АЦП
Входы:
Выходы: состояние регистров АЦП

==== Обработчик прерывания по первому таймеру ====

Блок 1: Сброс счетчика регистра прерываний
Входы: Счетчик
Выходы: Счетчик = 0

Блок 2: Обработка команд управления компьютером
Входы: Команда
Выходы:	Результат выполнения

Блок 3: Обработка команд управления светотехникой
Входы: Команда
Выходы:	Результат выполнения

Блок 4: Обработка команд управления руками
Входы: Команда
Выходы:	Результат выполнения

Блок 5: Обработка команд управления ногами
Входы: Команда
Выходы:	Результат выполнения

[[Обработчик_прерывания_по_первому_таймеру.png]]

==== Обработчик прерывания по второму таймеру ====

Блок 1: Сброс счетчика регистра прерываний
Входы: Счетчик
Выходы: Счетчик = 0

Блок 2: Счетчик импульсов датчиков расстояния += 1
Входы: Счетчик
Выходы: Значение счетчика, увеличенное на единицу

Блок 3: Обработка команд управления датчиками расстояния
Входы: Команда
Выходы:	Результат выполнения

[[Обработчик_прерывания_повторому_таймеру.png]]

==== Инициализация гироскопа (рассчет дрейфа) ====

Блок 1: Инициализация
Входы: Переменная суммы значений
Выходы: Переменная суммы значений

Блок 2: первичное измерение вращательного ускорения по оси z
Входы: переменная для хранения
Выходы: измеренное значение

Блок 3: инициализация цикла
Входы: переменная счетчик цикла
Выходы:	-

Блок 4: задержка 0.3 сек
Входы: 
Выходы:

Блок 5: новое измерение ускорения по z
Входы: переменная для хранения значения
Выходы: значение

Блок 6: подсчет суммы измерений
Входы: переменная суммы
Выходы: значение суммы

Блок 7: конец цикла
Входы: -
Выходы: переменная счетчик

Блок 8: подсчет дрейфа
Входы: переменная для хранения значения дрейфа
Выходы: значение дрейфа

===Проектирование ПО бортовой ЭВМ робота===
[[Система_питания.png]]

Генератор бреда.

===Проектирование системы управления движением===
[[Исполнительные_механизмы.png]]
====Стабилизация курса====
====Стабилизация траектории====
====Стабилизация скорости====
===Проектирование системы управления «жестикуляцией» робота===
[[Устройства_ЧМВ.png]]
==Технологическая часть==
===Разработка схемотехнических решений===
===Разработка ПО микроконтроллера===
===Разработка ПО бортовой ЭВМ робота===
===Разработка системы управления движением===
====Стабилизация курса====
====Стабилизация траектории====
====Стабилизация скорости====
===Разработка системы управления «жестикуляцией» робота===
==Информационная безопасность==
Определения и сокращения
АС - автоматизированные системы
НСД - несанкционированный доступ
РД - руководящий документ
СЗИ - система защиты информации
СЗИ НСД - система защиты информации от несанкционированного доступа
1. Определение класса АС
Определим класс нашей системы, основываясь на руководящем документе "Классификация АС и требования по защите от несанкционированного доступа к информации".
Предлагаемая система предназначена для общения с людьми и привлечения внимания к Университету.
Система имеет следующие возможности:
передвижение в автоматическом и/или дистанционно-управляемом режимах с требуемой скоростью и точностью по заданному маршруту,
имитирование человеческих эмоций
реагирование на раздражители
поддержание разговора - распознавать речь и отвечать на вопросы.
1.1 Анализ исходных данных
Таблица 1 перечень защищаемых информационных ресурсов АС и их уровень конфиденциальности
1. модель распознавания речи; секретная информация
2. модель синтеза речи; секретная информация
3. прошивка контроллера; внутренняя информация
4. настройки операционной системы; внутренняя информация
5. файлы исходного кода приложения для управления исполнительными механизмами; внутренняя информация
6. файлы исходного кода приложения для управления эмоциями и рефлексами; конфиденциальная информация
7. база знаний; секретная информация
8. база данных эмоций и рефлексов; секретная информация
9. база данных голосвых записей для воспроизведения речи; конфиденциальная информация
10. интерфейс пользователя; открытая информация
11. речевое API; открытая информация
Таблица 2 перечень лиц, имеющих доступ к штатным средствам АС, с указанием их уровня полномочий
1. Администратор; доступ к секретной информации;
2. Разработчик; доступ к секретной информации;
3. Тестировщик; доступ к внутренней информации;
4. Пользователь-собеседник; доступ к открытой информации.
Таблица 3 матрица доступа или полномочий субъектов доступа по отношению к защищаемым информационным ресурсам АС
; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10; 11
1. Администратор ; + ; + ; + ; + ; + ; + ; + ; + ; + ; + ; +
2. Разработчик ; + ; + ; + ; + ; + ; + ; + ; + ; + ; + ; +
3. Тестировщик ; - ; - ; + ; + ; + ; - ; - ; - ; - ; + ; +
4. Cобеседник ; - ; - ; - ; - ; - ; - ; - ; - ; - ; + ; +
Режим обработки данных в АС
Работы с системой могут производиться одновременно только одним человеком, следовательно режим обработки данных является индивидуальным.
1.2 выявление основных признаков АС, необходимых для классификации
наличие в АС информации различного уровня конфиденциальности; +
уровень полномочий субъектов доступа АС на доступ к конфиденциальной информации; +
режим обработки данных в АС; индивидуальный
1.3 сравнение выявленных признаков АС с классифицируемыми
Устанавливается девять классов защищенности АС от НСД к информации.
Каждый класс характеризуется определенной минимальной
совокупностью требований по защите.
Классы подразделяются на три группы, отличающиеся особенностями
обработки информации в АС.
В пределах каждой группы соблюдается иерархия требований по защите в
зависимости от ценности (конфиденциальности) информации и,
следовательно, иерархия классов защищенности АС.
Третья группа включает АС, в которых работает один пользователь,
допущенный ко всей информации АС, размещенной на носителях одного
уровня конфиденциальности. Группа содержит два класса - 3Б и 3А.
Вторая группа включает АС, в которых пользователи имеют одинаковые
права доступа (полномочия) ко всей информации АС, обрабатываемой и
(или) хранимой на носителях различного уровня конфиденциальности.
Группа содержит два класса - 2Б и 2А.
Первая группа включает многопользовательские АС, в которых
одновременно обрабатывается и (или) хранится информация разных уровней
конфиденциальности. Не все пользователи имеют право доступа ко всей
информации АС. Группа содержит пять классов - 1Д, 1Г, 1В, 1Б и 1А.
1.4 присвоение АС соответствующего класса защиты информации от НСД
На основе анализа исходных данных, можно сделать вывод, что разрабатываемая система относится к первой группе АС, и классу защищенноcти 1Д.
1.5 Требования к подсистемам класса защищенности 1Д
В общем случае, комплекс программно-технических средств и
организационных (процедурных) решений по защите информации от НСД
реализуется в рамках системы защиты информации от НСД (СЗИ НСД),
условно состоящей из следующих четырех подсистем:
- управления доступом;
- регистрации и учета;
- криптографической;
- обеспечения целостности.
Технические характеристики робота:
- Микроконтроллер (Arduino 2560)
- Платы расширения (модули реле, Н-моста, БИНС, серво-приводы, электродвигатели, провода, ультразвуковые датчики расстояния, камеры, и т.д.)
- Бортовая ЭВМ, ОС - Debian 8
Требования к классу защищенности 1Д:
Подсистема управления доступом:
Идентификация и проверка подлинности таких субъектов как: администратор
ктото еще осуществляется средствами операционной систмы. Доступ возможен
а) через ssh по сети
Ssh - сетевой протокол прикладного уровня, позволяющий производить удалённое управление операционной системой и туннелирование TCP-соединений (например, для передачи файлов). Схож по функциональности с протоколами Telnet и rlogin, но, в отличие от них, шифрует весь трафик, включая и передаваемые пароли. SSH допускает выбор различных алгоритмов шифрования. SSH-клиенты и SSH-серверы доступны для большинства сетевых операционных систем.
б) локально, через gdm
Gdm - графический дисплейный менеджер для X Window System. Эта программа регистрирует пользователей в операционной системе, предлагая им ввести их логин и пароль. GDM также позволяет выбирать графическую среду (сеанс) и локаль (набор языковых и региональных настроек).Экран приветствия GDM может иметь разный вид в зависимости от применённой к нему темы.
Идентификация и проверка подлинности пользователей-собеседников осущестляется
визуально при помощи системы распознавания лиц и голоса.
Подсистема регистрации и учета:
Регистрация факта входа всех пользователей, кроме собеседников осущестляется средствами
ОС в файле /var/log/auth.log, а остальных - в журналах программы.
Регистрация выхода из системы или останова не проводится в моменты аппаратурного отключения
АС. В параметрах регистрации указываются:
- дата и время входа (выхода) субъекта доступа в систему (из системы) или
загрузки (останова) системы;
- результат попытки входа: успешная или неуспешная -
несанкционированная;
- идентификатор (код или фамилия) субъекта, предъявленный при попытке
доступа;
Подсистема обеспечения целостности:
Целостность программных средств СЗИ НСД достигается за счет
подключения файловой системы /usr в режиме "только для чтения"
командой mount /dev/{device}/ /home/{directory}
Целостность обрабатываемой информации обеспечивается
с помощью исключения взаимодействия пользователя-собеседника
непосредственно с операционной системой в обход программного
обеспечения посредством визуального интерфейса.
Неизменность программной среды при работе пользователя-собеседника
обеспечивается настройкой прав доступа на каталоги программы и ее модулей
средствами Linux командой chmod -X {directory}/.
При этом:
- целостность СЗИ НСД проверяется при загрузке системы по контрольным
хэшам компонент СЗИ запуском скрипта rc.local. Используются хэши
sha256. Хэши компонент хранятся в файловой системе /var/hashes,
которая отключается из системы после проверки. Т.о. злоумышленник
не может подменить или рассчитать коллизии хэшей.
- целостность программной среды обеспечивается использованием
трансляторов с языков высокого уровня и отсутствием средств модификации
объектного кода программ в процессе обработки и (или) хранения
защищаемой информации;
- физическая охрана СВТ робота, предусматривающая контроль доступа к ним
посторонних лиц, осуществляется самим роботом, так как он оборудован руками и клешнями,
и может произвести самозащиту в случае опасности;
- периодическое тестирование функций СЗИ НСД при
изменении программной среды и персонала АС с помощью тест - программ,
имитирующих попытки НСД производится;
- имеются средства восстановления СЗИ НСД, предусматривающие ведение
двух копий программных средств СЗИ НСД и их периодическое обновление и контроль работоспособности. Резервное копирование выполняется с помощью планировщика задач cron и скриптов на языке shell.
